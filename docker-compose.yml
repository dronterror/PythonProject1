version: '3.8'

services:
  traefik:
    image: traefik:v2.11
    command:
      - --configfile=/etc/traefik/traefik.yml
    ports:
      - "80:80"       # HTTP
      - "8081:8080"   # Traefik dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./traefik.yml:/etc/traefik/traefik.yml
    restart: unless-stopped
    networks:
      - traefik-network
    # Performance optimizations
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    # healthcheck:
    #   test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3

  db:
    image: postgres:15
    environment:
      POSTGRES_USER: valmed
      POSTGRES_PASSWORD: valmedpass
      POSTGRES_DB: valmed
      # PostgreSQL performance optimizations
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
      # PostgreSQL configuration for performance
      - ./postgres.conf:/etc/postgresql/postgresql.conf
    restart: unless-stopped
    networks:
      - traefik-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U valmed"]
      interval: 10s
      timeout: 5s
      retries: 5
    # Performance optimizations
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    command: >
      postgres
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB
      -c max_connections=100

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      cache_from:
        - valmed-backend:cache
      target: production
    volumes:
      - ./backend:/app
      - backend_cache:/root/.cache/pip
    environment:
      DATABASE_URL: postgresql+psycopg2://valmed:valmedpass@db:5432/valmed
      SECRET_KEY: "supersecret"
      # Performance environment variables
      PYTHONUNBUFFERED: "1"
      PYTHONDONTWRITEBYTECODE: "1"
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - traefik-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/docs"]
      interval: 30s
      timeout: 10s
      retries: 3
    # Performance optimizations
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=PathPrefix(`/patients`) || PathPrefix(`/drugs`) || PathPrefix(`/prescriptions`) || PathPrefix(`/analyses`) || PathPrefix(`/reports`) || PathPrefix(`/dev`) || PathPrefix(`/metrics`) || PathPrefix(`/blockchain`) || PathPrefix(`/analytics`) || PathPrefix(`/dashboard`) || PathPrefix(`/export`) || PathPrefix(`/audit-logs`) || PathPrefix(`/token`) || PathPrefix(`/register`)"
      - "traefik.http.services.backend.loadbalancer.server.port=8000"
      - "traefik.http.routers.backend.entrypoints=web"
      - "traefik.http.routers.backend.priority=100"
      - "traefik.http.services.backend.loadbalancer.sticky.cookie=true"
      - "traefik.http.services.backend.loadbalancer.sticky.cookie.name=valmed_session"
      - "traefik.http.middlewares.backend-compression.compress=true"
      - "traefik.http.middlewares.backend-security.headers.stsSeconds=31536000"
      - "traefik.http.middlewares.backend-security.headers.stsIncludeSubdomains=true"
      - "traefik.http.middlewares.backend-security.headers.stsPreload=true"
      - "traefik.http.middlewares.backend-security.headers.forceSTSHeader=true"
      - "traefik.http.middlewares.backend-security.headers.customFrameOptionsValue=SAMEORIGIN"
      - "traefik.http.routers.backend.middlewares=backend-compression,backend-security"

  frontend:
    build:
      context: ./frontend-react
      dockerfile: Dockerfile
      cache_from:
        - valmed-frontend:cache
    volumes:
      - /app/node_modules
      - frontend_cache:/root/.npm
    environment:
      - REACT_APP_API_URL=http://localhost
      - CHOKIDAR_USEPOLLING=true
      # Performance environment variables
      - NODE_ENV=production
      - GENERATE_SOURCEMAP=false
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - traefik-network
    ports:
      - "3000:3000"
    # healthcheck:
    #   test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health"]
    #   interval: 10s
    #   timeout: 5s
    #   retries: 10
    #   start_period: 40s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`localhost`) && !PathPrefix(`/patients`) && !PathPrefix(`/drugs`) && !PathPrefix(`/prescriptions`) && !PathPrefix(`/analyses`) && !PathPrefix(`/reports`) && !PathPrefix(`/dev`) && !PathPrefix(`/metrics`) && !PathPrefix(`/blockchain`) && !PathPrefix(`/analytics`) && !PathPrefix(`/dashboard`) && !PathPrefix(`/export`) && !PathPrefix(`/audit-logs`) && !PathPrefix(`/token`) && !PathPrefix(`/register`)"
      - "traefik.http.services.frontend.loadbalancer.server.port=3000"
      - "traefik.http.routers.frontend.entrypoints=web"
      - "traefik.http.routers.frontend.priority=1"
      - "traefik.http.services.frontend.loadbalancer.sticky.cookie=true"
      - "traefik.http.services.frontend.loadbalancer.sticky.cookie.name=valmed_frontend_session"
      - "traefik.http.middlewares.frontend-compression.compress=true"
      - "traefik.http.middlewares.frontend-security.headers.stsSeconds=31536000"
      - "traefik.http.middlewares.frontend-security.headers.stsIncludeSubdomains=true"
      - "traefik.http.middlewares.frontend-security.headers.stsPreload=true"
      - "traefik.http.middlewares.frontend-security.headers.forceSTSHeader=true"
      - "traefik.http.middlewares.frontend-security.headers.customFrameOptionsValue=SAMEORIGIN"
      - "traefik.http.routers.frontend.middlewares=frontend-compression,frontend-security"

  ganache:
    image: trufflesuite/ganache-cli
    ports:
      - "8545:8545"
    command: ["--accounts", "10", "--defaultBalanceEther", "1000"]
    restart: unless-stopped
    networks:
      - traefik-network
    # Performance optimizations
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  airflow-webserver:
    image: apache/airflow:2.8.1
    restart: always
    depends_on:
      - airflow-init
      - airflow-db
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@airflow-db:5432/airflow
      - AIRFLOW__CORE__FERNET_KEY=yourfernetkeyhere
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
      - AIRFLOW__WEBSERVER__SECRET_KEY=yourwebsecretkey
      - _AIRFLOW_WWW_USER_USERNAME=airflow
      - _AIRFLOW_WWW_USER_PASSWORD=airflow
      - AIRFLOW_UID=50000
      # Performance optimizations
      - AIRFLOW__WEBSERVER__WORKERS=4
      - AIRFLOW__WEBSERVER__WORKER_REFRESH_BATCH_SIZE=1
      - AIRFLOW__WEBSERVER__WORKER_REFRESH_INTERVAL=30
    ports:
      - "8080:8080"
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - airflow_data:/opt/airflow
    command: webserver
    networks:
      - traefik-network
    # Performance optimizations
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.airflow.rule=PathPrefix(`/airflow`)"
      - "traefik.http.services.airflow.loadbalancer.server.port=8080"
      - "traefik.http.routers.airflow.entrypoints=web"
      - "traefik.http.routers.airflow.priority=20"

  airflow-scheduler:
    image: apache/airflow:2.8.1
    restart: always
    depends_on:
      - airflow-init
      - airflow-db
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@airflow-db:5432/airflow
      - AIRFLOW__CORE__FERNET_KEY=yourfernetkeyhere
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
      - AIRFLOW__WEBSERVER__SECRET_KEY=yourwebsecretkey
      - AIRFLOW_UID=50000
      # Performance optimizations
      - AIRFLOW__SCHEDULER__JOB_HEARTBEAT_SEC=5
      - AIRFLOW__SCHEDULER__SCHEDULER_HEARTBEAT_SEC=5
      - AIRFLOW__SCHEDULER__DAG_DIR_LIST_INTERVAL=300
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - airflow_data:/opt/airflow
    command: scheduler
    networks:
      - traefik-network
    # Performance optimizations
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  airflow-init:
    image: apache/airflow:2.8.1
    depends_on:
      - airflow-db
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@airflow-db:5432/airflow
      - AIRFLOW__CORE__FERNET_KEY=yourfernetkeyhere
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
      - AIRFLOW__WEBSERVER__SECRET_KEY=yourwebsecretkey
      - _AIRFLOW_WWW_USER_USERNAME=airflow
      - _AIRFLOW_WWW_USER_PASSWORD=airflow
      - AIRFLOW_UID=50000
    entrypoint: /bin/bash
    command: -c "airflow db migrate && airflow users create --username airflow --password airflow --firstname Airflow --lastname Admin --role Admin --email airflow@airflow.com"
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - airflow_data:/opt/airflow
    networks:
      - traefik-network

  airflow-db:
    image: postgres:15
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - airflow_postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U airflow"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always
    networks:
      - traefik-network
    # Performance optimizations
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

networks:
  traefik-network:
    driver: bridge
    # Network optimizations
    driver_opts:
      com.docker.network.bridge.name: traefik-bridge

volumes:
  db_data:
    driver: local
  airflow_data:
    driver: local
  airflow_postgres_data:
    driver: local
  backend_cache:
    driver: local
  frontend_cache:
    driver: local

# For K8s: Move env vars to secrets/configmaps, use persistent volumes, and healthchecks as needed.
# Consider using a .env file for local secrets/configs (Docker Compose supports this out of the box) 