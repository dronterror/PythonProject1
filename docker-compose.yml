version: '3.8'

services:
  traefik:
    image: traefik:v2.11
    command:
      - --api.insecure=true
      - --providers.docker=true
      - --entrypoints.web.address=:80
    ports:
      - "80:80"
      - "8081:8080" # Traefik dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  db:
    image: postgres:15
    environment:
      POSTGRES_USER: valmed
      POSTGRES_PASSWORD: valmedpass
      POSTGRES_DB: valmed
    ports:
      - "5432:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U valmed"]
      interval: 10s
      timeout: 5s
      retries: 5
    # For K8s: Use secrets/configmaps for env vars

  backend:
    build: ./backend
    volumes:
      - ./backend:/app
    environment:
      DATABASE_URL: postgresql+psycopg2://valmed:valmedpass@db:5432/valmed
      SECRET_KEY: "supersecret"
    depends_on:
      - db
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/docs"]
      interval: 10s
      timeout: 5s
      retries: 5
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=PathPrefix(`/api`)"
      - "traefik.http.services.backend.loadbalancer.server.port=8000"
    # For K8s: Use secrets/configmaps for env vars

  ganache:
    image: trufflesuite/ganache-cli
    ports:
      - "8545:8545"
    command: ["--accounts", "10", "--defaultBalanceEther", "1000"]
    restart: unless-stopped

  airflow-webserver:
    image: apache/airflow:2.8.1
    restart: always
    depends_on:
      - airflow-init
      - airflow-scheduler
      - airflow-worker
      - airflow-triggerer
      - airflow-db
      - airflow-redis
    environment:
      - AIRFLOW__CORE__EXECUTOR=CeleryExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@airflow-db:5432/airflow
      - AIRFLOW__CORE__FERNET_KEY=yourfernetkeyhere
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
      - AIRFLOW__WEBSERVER__SECRET_KEY=yourwebsecretkey
      - _AIRFLOW_WWW_USER_USERNAME=airflow
      - _AIRFLOW_WWW_USER_PASSWORD=airflow
      - AIRFLOW__CELERY__BROKER_URL=redis://airflow-redis:6379/0
      - AIRFLOW__CELERY__RESULT_BACKEND=db+postgresql://airflow:airflow@airflow-db:5432/airflow
      - AIRFLOW_UID=50000
    ports:
      - "8080:8080"
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - airflow_data:/opt/airflow
    command: webserver

  airflow-scheduler:
    image: apache/airflow:2.8.1
    restart: always
    depends_on:
      - airflow-init
      - airflow-db
      - airflow-redis
    environment:
      - AIRFLOW__CORE__EXECUTOR=CeleryExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@airflow-db:5432/airflow
      - AIRFLOW__CORE__FERNET_KEY=yourfernetkeyhere
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
      - AIRFLOW__WEBSERVER__SECRET_KEY=yourwebsecretkey
      - AIRFLOW__CELERY__BROKER_URL=redis://airflow-redis:6379/0
      - AIRFLOW__CELERY__RESULT_BACKEND=db+postgresql://airflow:airflow@airflow-db:5432/airflow
      - AIRFLOW_UID=50000
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - airflow_data:/opt/airflow
    command: scheduler

  airflow-worker:
    image: apache/airflow:2.8.1
    restart: always
    depends_on:
      - airflow-init
      - airflow-db
      - airflow-redis
    environment:
      - AIRFLOW__CORE__EXECUTOR=CeleryExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@airflow-db:5432/airflow
      - AIRFLOW__CORE__FERNET_KEY=yourfernetkeyhere
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
      - AIRFLOW__WEBSERVER__SECRET_KEY=yourwebsecretkey
      - AIRFLOW__CELERY__BROKER_URL=redis://airflow-redis:6379/0
      - AIRFLOW__CELERY__RESULT_BACKEND=db+postgresql://airflow:airflow@airflow-db:5432/airflow
      - AIRFLOW_UID=50000
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - airflow_data:/opt/airflow
    command: celery worker

  airflow-triggerer:
    image: apache/airflow:2.8.1
    restart: always
    depends_on:
      - airflow-init
      - airflow-db
      - airflow-redis
    environment:
      - AIRFLOW__CORE__EXECUTOR=CeleryExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@airflow-db:5432/airflow
      - AIRFLOW__CORE__FERNET_KEY=yourfernetkeyhere
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
      - AIRFLOW__WEBSERVER__SECRET_KEY=yourwebsecretkey
      - AIRFLOW__CELERY__BROKER_URL=redis://airflow-redis:6379/0
      - AIRFLOW__CELERY__RESULT_BACKEND=db+postgresql://airflow:airflow@airflow-db:5432/airflow
      - AIRFLOW_UID=50000
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - airflow_data:/opt/airflow
    command: triggerer

  airflow-init:
    image: apache/airflow:2.8.1
    depends_on:
      - airflow-db
      - airflow-redis
    environment:
      - AIRFLOW__CORE__EXECUTOR=CeleryExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@airflow-db:5432/airflow
      - AIRFLOW__CORE__FERNET_KEY=yourfernetkeyhere
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
      - AIRFLOW__WEBSERVER__SECRET_KEY=yourwebsecretkey
      - _AIRFLOW_WWW_USER_USERNAME=airflow
      - _AIRFLOW_WWW_USER_PASSWORD=airflow
      - AIRFLOW__CELERY__BROKER_URL=redis://airflow-redis:6379/0
      - AIRFLOW__CELERY__RESULT_BACKEND=db+postgresql://airflow:airflow@airflow-db:5432/airflow
      - AIRFLOW_UID=50000
    entrypoint: /bin/bash
    command: -c "airflow db migrate && airflow users create --username airflow --password airflow --firstname Airflow --lastname Admin --role Admin --email airflow@airflow.com"
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - airflow_data:/opt/airflow

  airflow-db:
    image: postgres:15
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - airflow_postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U airflow"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always

  airflow-redis:
    image: redis:7.2-bookworm
    expose:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 30s
      retries: 50
      start_period: 30s
    restart: always

  frontend:
    build: ./frontend
    depends_on:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 10s
      timeout: 5s
      retries: 5
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=PathPrefix(`/`)"
      - "traefik.http.routers.frontend.priority=1"
      - "traefik.http.services.frontend.loadbalancer.server.port=80"
    # For K8s: Use configmaps for Nginx config if needed

volumes:
  db_data:
  airflow_data:
  airflow_postgres_data:

# For K8s: Move env vars to secrets/configmaps, use persistent volumes, and healthchecks as needed.
# Consider using a .env file for local secrets/configs (Docker Compose supports this out of the box) 